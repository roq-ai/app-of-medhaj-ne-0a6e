generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model article {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(255)
  content     String
  category_id String   @db.Uuid
  client_id   String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  client      client   @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  client_id   String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  article     article[]
  client      client    @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  guest       guest[]
}

model client {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  article     article[]
  category    category[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contributor contributor[]
}

model contributor {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String    @db.Uuid
  client_id           String    @db.Uuid
  last_contribution   DateTime? @db.Timestamp(6)
  total_contributions Int?
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @default(now()) @db.Timestamp(6)
  client              client    @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guest {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username             String    @db.VarChar(255)
  email                String    @db.VarChar(255)
  last_login           DateTime? @db.Timestamp(6)
  last_search          String?   @db.VarChar(255)
  favorite_category_id String    @db.Uuid
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  category             category  @relation(fields: [favorite_category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  client      client[]
  contributor contributor[]
}
